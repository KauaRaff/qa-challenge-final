name: Cinema Test Automation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Executa testes diariamente às 8h UTC (5h Brasília)
    - cron: '0 8 * * *'
  workflow_dispatch:
    # Permite execução manual
    inputs:
      test_suite:
        description: 'Suite de testes para executar'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - web
          - smoke
          - p0

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # ============================================
  # JOB 1: VALIDAÇÃO DE CÓDIGO
  # ============================================
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install robotframework-tidy robotframework-robocop
      
      - name: 🧹 Robot Framework Linting
        run: |
          echo "🔍 Verificando qualidade do código Robot Framework..."
          robocop --reports all tests/ resources/
        continue-on-error: true
      
      - name: 📊 Generate Quality Report
        if: always()
        run: |
          echo "📊 Relatório de qualidade gerado"
          robocop --reports all --output robocop.html tests/ resources/
        continue-on-error: true
      
      - name: 📤 Upload Quality Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: robocop.html
          retention-days: 30

  # ============================================
  # JOB 2: SETUP DO AMBIENTE DE TESTE
  # ============================================
  setup-environment:
    name: 🔧 Setup Test Environment
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: cinema-app
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Robot Framework Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 🌐 Initialize Browser Library
        run: |
          rfbrowser init
      
      - name: ✅ Verify Robot Framework Installation
        run: |
          robot --version
          rfbrowser --version
      
      - name: 📁 Create Results Directory
        run: |
          mkdir -p results/api results/web results/reports

  # ============================================
  # JOB 3: TESTES DE API
  # ============================================
  api-tests:
    name: 🔌 API Tests
    runs-on: ubuntu-latest
    needs: setup-environment
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: cinema-app
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 📥 Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          repository: juniorschmitz/cinema-challenge-back
          path: backend
      
      - name: 🟢 Setup Node.js for Backend
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: 📦 Install Backend Dependencies
        working-directory: backend
        run: npm ci
      
      - name: 🌱 Seed Database
        working-directory: backend
        env:
          MONGODB_URI: mongodb://localhost:27017/cinema-app
          PORT: 5000
        run: |
          npm run seed
          echo "✅ Database seeded successfully"
      
      - name: 🚀 Start Backend Server
        working-directory: backend
        env:
          MONGODB_URI: mongodb://localhost:27017/cinema-app
          PORT: 5000
          JWT_SECRET: test-secret-key
          NODE_ENV: test
        run: |
          npm start &
          echo "⏳ Aguardando API iniciar..."
          sleep 10
          curl -f http://localhost:5000/api/v1/movies || exit 1
          echo "✅ API está respondendo"
      
      - name: 🧪 Run API Tests
        run: |
          robot \
            --outputdir results/api \
            --name "API Tests" \
            --loglevel INFO \
            --variable BASE_URL:http://localhost:5000/api/v1 \
            tests/api/
      
      - name: 📊 Generate API Test Report
        if: always()
        run: |
          echo "📊 Relatório de API gerado em results/api/report.html"
      
      - name: 📤 Upload API Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: results/api/
          retention-days: 30

  # ============================================
  # JOB 4: TESTES WEB (E2E)
  # ============================================
  web-tests:
    name: 🌐 Web E2E Tests
    runs-on: ubuntu-latest
    needs: setup-environment
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: cinema-app
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 🌐 Initialize Browser Library
        run: rfbrowser init chromium
      
      - name: 📥 Checkout Backend
        uses: actions/checkout@v4
        with:
          repository: juniorschmitz/cinema-challenge-back
          path: backend
      
      - name: 📥 Checkout Frontend
        uses: actions/checkout@v4
        with:
          repository: juniorschmitz/cinema-challenge-front
          path: frontend
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Install Backend Dependencies
        working-directory: backend
        run: npm ci
      
      - name: 📦 Install Frontend Dependencies
        working-directory: frontend
        run: npm ci
      
      - name: 🌱 Seed Database
        working-directory: backend
        env:
          MONGODB_URI: mongodb://localhost:27017/cinema-app
        run: npm run seed
      
      - name: 🚀 Start Backend
        working-directory: backend
        env:
          MONGODB_URI: mongodb://localhost:27017/cinema-app
          PORT: 5000
          JWT_SECRET: test-secret-key
        run: |
          npm start &
          sleep 10
      
      - name: 🚀 Start Frontend
        working-directory: frontend
        env:
          VITE_API_URL: http://localhost:5000/api/v1
        run: |
          npm run build
          npx serve -s dist -l 3000 &
          sleep 5
          curl -f http://localhost:3000 || exit 1
      
      - name: 🧪 Run Web Tests
        env:
          HEADLESS: true
        run: |
          robot \
            --outputdir results/web \
            --name "Web E2E Tests" \
            --loglevel INFO \
            --variable WEB_URL:http://localhost:3000 \
            --variable BASE_URL:http://localhost:5000/api/v1 \
            --variable HEADLESS:true \
            tests/web/
      
      - name: 📤 Upload Web Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-test-results
          path: results/web/
          retention-days: 30
      
      - name: 📸 Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: results/web/browser/screenshot/
          retention-days: 7

  # ============================================
  # JOB 5: SMOKE TESTS (Rápidos)
  # ============================================
  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: setup-environment
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: cinema-app
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 📥 Setup Backend
        uses: actions/checkout@v4
        with:
          repository: juniorschmitz/cinema-challenge-back
          path: backend
      
      - name: 🟢 Setup Node & Start Backend
        working-directory: backend
        run: |
          npm ci
          npm run seed
          npm start &
          sleep 10
        env:
          MONGODB_URI: mongodb://localhost:27017/cinema-app
          PORT: 5000
      
      - name: 💨 Run Smoke Tests Only
        run: |
          robot \
            --outputdir results/smoke \
            --name "Smoke Tests" \
            --include smoke \
            tests/
      
      - name: 📤 Upload Smoke Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: results/smoke/

  # ============================================
  # JOB 6: CONSOLIDAÇÃO DE RESULTADOS
  # ============================================
  consolidate-results:
    name: 📊 Consolidate Test Results
    runs-on: ubuntu-latest
    needs: [api-tests, web-tests]
    if: always()
    
    steps:
      - name: 📥 Download API Results
        uses: actions/download-artifact@v4
        with:
          name: api-test-results
          path: results/api
      
      - name: 📥 Download Web Results
        uses: actions/download-artifact@v4
        with:
          name: web-test-results
          path: results/web
      
      - name: 📊 Generate Consolidated Report
        run: |
          echo "# 🎬 Cinema Test Automation - Execution Summary" > summary.md
          echo "" >> summary.md
          echo "## 📈 Test Results" >> summary.md
          echo "" >> summary.md
          echo "### API Tests" >> summary.md
          echo "- Report: [View API Report](results/api/report.html)" >> summary.md
          echo "" >> summary.md
          echo "### Web Tests" >> summary.md
          echo "- Report: [View Web Report](results/web/report.html)" >> summary.md
          echo "" >> summary.md
          cat summary.md
      
      - name: 📝 Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🎬 **Cinema Test Automation Results**\n\n✅ Tests completed! Check artifacts for detailed reports.'
            })
      
      - name: 📤 Upload Consolidated Report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-report
          path: |
            results/
            summary.md
          retention-days: 90

  # ============================================
  # JOB 7: PUBLICAR RELATÓRIOS (GitHub Pages)
  # ============================================
  publish-reports:
    name: 📰 Publish Test Reports
    runs-on: ubuntu-latest
    needs: consolidate-results
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pages: write
    
    steps:
      - name: 📥 Download Consolidated Report
        uses: actions/download-artifact@v4
        with:
          name: consolidated-report
          path: reports
      
      - name: 📄 Generate Index Page
        run: |
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Cinema Test Reports</title>
            <style>
              body { font-family: Arial; max-width: 1200px; margin: 50px auto; }
              h1 { color: #333; }
              .report-card { border: 1px solid #ddd; padding: 20px; margin: 10px 0; }
              a { color: #0066cc; text-decoration: none; }
            </style>
          </head>
          <body>
            <h1>🎬 Cinema Test Automation Reports</h1>
            <div class="report-card">
              <h2>📊 API Tests</h2>
              <p><a href="results/api/report.html">View Report</a></p>
            </div>
            <div class="report-card">
              <h2>🌐 Web Tests</h2>
              <p><a href="results/web/report.html">View Report</a></p>
            </div>
          </body>
          </html>
          EOF
      
      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          publish_branch: gh-pages

  # ============================================
  # JOB 8: NOTIFICAÇÕES
  # ============================================
  notify:
    name: 📬 Send Notifications
    runs-on: ubuntu-latest
    needs: [api-tests, web-tests]
    if: always()
    
    steps:
      - name: 📊 Check Test Status
        id: test-status
        run: |
          if [ "${{ needs.api-tests.result }}" == "success" ] && [ "${{ needs.web-tests.result }}" == "success" ]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILURE" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi
      
      - name: 📧 Send Status Summary
        run: |
          echo "Pipeline Status: ${{ steps.test-status.outputs.status }}"
          echo "API Tests: ${{ needs.api-tests.result }}"
          echo "Web Tests: ${{ needs.web-tests.result }}"